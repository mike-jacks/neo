type SchemaNode {
  name: String!
  domain: String!
  type: String!
  labels: [SchemaLabel!]
  properties: [SchemaProperty!]
}

type SchemaProperty {
  name: String!
  type: String!
  domain: String!
  parentName: String!
}

type SchemaLabel {
  name: String!
  domain: String!
  parentName: String!
}

type SchemaRelationship {
  name: String!
  domain: String!
  targetName: String!
  properties: [SchemaProperty!]!
  parentName: String!
}

type Query {
  getSchemaNodes(domain: String!): [SchemaNode!]!
  getSchemaProperties(schemaNodeName: String!, domain: String!): [SchemaProperty!]!
  getSchemaRelationships(schemaNodeName: String!, domain: String!): [SchemaRelationship!]!

  getSchemaNode(domain: String!, name: String!): SchemaNode!
  getSchemaProperty(domain: String!, name: String!, type: String!, parentName: String!): SchemaProperty!
  getSchemaRelationship(domain: String!, name: String!, parentName: String!): SchemaRelationship!
}

type Mutation {
  createSchemaNode(sourceSchemaNodeName: String, createSchemaNodeInput: CreateSchemaNodeInput!): SchemaNode!
  createSchemaProperty(schemaNodeName: String!, domain: String!, createSchemaPropertyInput: CreateSchemaPropertyInput!): SchemaProperty!
  createSchemaRelationship(createSchemaRelationshipInput: CreateSchemaRelationshipInput!): SchemaRelationship!

  updateSchemaNode(name: String!, domain: String!, updateSchemaNodeInput: UpdateSchemaNodeInput!): SchemaNode!
  updateSchemaProperty(name: String!, type: String!, domain: String!, updateSchemaPropertyInput: UpdateSchemaPropertyInput!): SchemaProperty!
  updateSchemaRelationship(name: String!, domain: String!, updateSchemaRelationshipInput: UpdateSchemaRelationshipInput!): SchemaRelationship!

  deleteSchemaNode(name: String!, domain: String!): Boolean!
  deleteSchemaProperty(name: String!, type: String!, domain: String!): Boolean!
  deleteSchemaRelationship(name: String!, domain: String!): Boolean!
}

input CreateSchemaNodeInput {
  name: String!
  domain: String!
  type: String!
  labels: [SchemaLabelInput!]
  properties: [SchemaPropertyInput!]
}

input CreateSchemaPropertyInput {
  name: String!
  type: String!
  domain: String!
  parentName: String!
}

input CreateSchemaRelationshipInput {
  name: String!
  domain: String!
  targetName: String!
  properties: [SchemaPropertyInput!]!
  parentName: String!
}

input UpdateSchemaNodeInput {
  name: String
  domain: String
  type: String
  labels: [SchemaLabelInput!]
  properties: [SchemaPropertyInput!]
}

input UpdateSchemaPropertyInput {
  name: String
  type: String
  domain: String
  parentName: String
}

input UpdateSchemaRelationshipInput {
  name: String
  domain: String
  targetName: String
  properties: [SchemaPropertyInput!]
  parentName: String
}

input SchemaPropertyInput {
  name: String!
  type: String!
  domain: String!
  parentName: String!
}

input SchemaLabelInput {
  name: String!
  domain: String!
  parentName: String!
}
