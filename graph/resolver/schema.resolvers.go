package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/mike-jacks/neo/graph/generated"
	"github.com/mike-jacks/neo/graph/generated/model"
	"github.com/neo4j/neo4j-go-driver/v5/neo4j"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, name string) (*model.Person, error) {
	session := r.Driver.NewSession(ctx, neo4j.SessionConfig{AccessMode: neo4j.AccessModeWrite})
	defer session.Close(ctx)

	result, err := session.Run(ctx, "CREATE (p:Person {id: $id, name: $name}) RETURN p.id, p.name", map[string]interface{}{
		"id":   uuid.New().String(),
		"name": name,
	})
	if err != nil {
		return nil, err
	}

	if result.Next(ctx) {
		record := result.Record()
		id, _ := record.Get("p.id")
		name, _ := record.Get("p.name")
		return &model.Person{
			ID:   id.(string),
			Name: name.(string),
		}, nil
	}

	return nil, fmt.Errorf("failed to create person")
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, name *string) (*model.Person, error) {
	session := r.Driver.NewSession(ctx, neo4j.SessionConfig{AccessMode: neo4j.AccessModeWrite})
	defer session.Close(ctx)

	result, err := session.Run(ctx, "MATCH (p:Person {id: $id}) SET p.name = $name RETURN p.id, p.name", map[string]interface{}{
		"name": name,
	})
	if err != nil {
		return nil, err
	}

	if result.Next(ctx) {
		record := result.Record()
		id, _ := record.Get("p.id")
		name, _ := record.Get("p.name")
		return &model.Person{
			ID:   id.(string),
			Name: name.(string),
		}, nil
	}

	return nil, fmt.Errorf("failed to update person")
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id string) (bool, error) {
	session := r.Driver.NewSession(ctx, neo4j.SessionConfig{AccessMode: neo4j.AccessModeWrite})
	defer session.Close(ctx)

	result, err := session.Run(ctx, "MATCH (p:Person {id: $id}) DETACH DELETE p RETURN true", map[string]interface{}{
		"id": id,
	})
	if err != nil {
		return false, err
	}

	if result.Next(ctx) {
		record := result.Record()
		success, _ := record.Get("true")
		return success.(bool), nil
	}

	return false, fmt.Errorf("failed to delete person")
}

// Persons is the resolver for the persons field.
func (r *queryResolver) Persons(ctx context.Context) ([]*model.Person, error) {
	session := r.Driver.NewSession(ctx, neo4j.SessionConfig{AccessMode: neo4j.AccessModeRead})
	defer session.Close(ctx)

	result, err := session.Run(ctx, "MATCH (p:Person) RETURN p", nil)
	if err != nil {
		return nil, err
	}

	var persons []*model.Person
	for result.Next(ctx) {
		record := result.Record()
		node, ok := record.Get("p")
		if !ok {
			return nil, fmt.Errorf("person node not found")
		}
		personNode := node.(neo4j.Node)
		personNodeProps := personNode.Props

		persons = append(persons, &model.Person{
			ID:   personNodeProps["id"].(string),
			Name: personNodeProps["name"].(string),
		})
	}

	if err = result.Err(); err != nil {
		return nil, err
	}

	return persons, nil
}

// Person is the resolver for the person field.
func (r *queryResolver) Person(ctx context.Context, id string) (*model.Person, error) {
	session := r.Driver.NewSession(ctx, neo4j.SessionConfig{AccessMode: neo4j.AccessModeRead})
	defer session.Close(ctx)

	result, err := session.Run(ctx, "MATCH (p:Person {id: $id}) RETURN p.id, p.name", map[string]interface{}{"id": id})
	if err != nil {
		return nil, err
	}

	if result.Next(ctx) {
		record := result.Record()
		id, _ := record.Get("p.id")
		name, _ := record.Get("p.name")
		return &model.Person{
			ID:   id.(string),
			Name: name.(string),
		}, nil
	}

	return nil, nil // or return an error if person not found
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
