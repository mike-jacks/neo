package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/mike-jacks/neo/generated"
	"github.com/mike-jacks/neo/model"
)

// CreateSchemaNode is the resolver for the createSchemaNode field.
func (r *mutationResolver) CreateSchemaNode(ctx context.Context, sourceSchemaNodeName *string, createSchemaNodeInput model.CreateSchemaNodeInput) (*model.SchemaNode, error) {
	return r.Database.CreateSchemaNode(ctx, sourceSchemaNodeName, createSchemaNodeInput)
}

// UpdateSchemaNode is the resolver for the updateSchemaNode field.
func (r *mutationResolver) UpdateSchemaNode(ctx context.Context, domain string, name string, updateSchemaNodeInput model.UpdateSchemaNodeInput) ([]*model.SchemaNode, error) {
	return r.Database.UpdateSchemaNode(ctx, domain, name, updateSchemaNodeInput)
}

// DeleteSchemaNode is the resolver for the deleteSchemaNode field.
func (r *mutationResolver) DeleteSchemaNode(ctx context.Context, domain string, name string) (bool, error) {
	return r.Database.DeleteSchemaNode(ctx, domain, name)
}

// InsertSchemaNode is the resolver for the insertSchemaNode field.
func (r *mutationResolver) InsertSchemaNode(ctx context.Context, domain string, parentName string, childName string) (*model.SchemaNode, error) {
	panic(fmt.Errorf("not implemented: InsertSchemaNode - insertSchemaNode"))
}

// CreateSchemaProperty is the resolver for the createSchemaProperty field.
func (r *mutationResolver) CreateSchemaProperty(ctx context.Context, createSchemaPropertyInput model.CreateSchemaPropertyInput) (*model.SchemaProperty, error) {
	panic(fmt.Errorf("not implemented: CreateSchemaProperty - createSchemaProperty"))
}

// UpdateSchemaProperty is the resolver for the updateSchemaProperty field.
func (r *mutationResolver) UpdateSchemaProperty(ctx context.Context, domain string, schemaNodeName string, schemaPropertyName string, schemaPropertyType string, updateSchemaPropertyInput model.UpdateSchemaPropertyInput) (*model.SchemaProperty, error) {
	panic(fmt.Errorf("not implemented: UpdateSchemaProperty - updateSchemaProperty"))
}

// DeleteSchemaProperty is the resolver for the deleteSchemaProperty field.
func (r *mutationResolver) DeleteSchemaProperty(ctx context.Context, domain string, schemaNodeName string, schemaPropertyName string, schemaPropertyType string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSchemaProperty - deleteSchemaProperty"))
}

// CreateSchemaRelationship is the resolver for the createSchemaRelationship field.
func (r *mutationResolver) CreateSchemaRelationship(ctx context.Context, createSchemaRelationshipInput model.CreateSchemaRelationshipInput) (*model.SchemaRelationship, error) {
	panic(fmt.Errorf("not implemented: CreateSchemaRelationship - createSchemaRelationship"))
}

// UpdateSchemaRelationship is the resolver for the updateSchemaRelationship field.
func (r *mutationResolver) UpdateSchemaRelationship(ctx context.Context, domain string, schemaNodeName string, schemaRelationshipName string, updateSchemaRelationshipInput model.UpdateSchemaRelationshipInput) (*model.SchemaRelationship, error) {
	panic(fmt.Errorf("not implemented: UpdateSchemaRelationship - updateSchemaRelationship"))
}

// DeleteSchemaRelationship is the resolver for the deleteSchemaRelationship field.
func (r *mutationResolver) DeleteSchemaRelationship(ctx context.Context, domain string, schemaNodeName string, schemaRelationshipName string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSchemaRelationship - deleteSchemaRelationship"))
}

// CreateSchemaLabel is the resolver for the createSchemaLabel field.
func (r *mutationResolver) CreateSchemaLabel(ctx context.Context, createSchemaLabelInput model.CreateSchemaLabelInput) (*model.SchemaLabel, error) {
	panic(fmt.Errorf("not implemented: CreateSchemaLabel - createSchemaLabel"))
}

// UpdateSchemaLabel is the resolver for the updateSchemaLabel field.
func (r *mutationResolver) UpdateSchemaLabel(ctx context.Context, domain string, schemaNodeName string, schemaLabelName string, updateSchemaLabelInput model.UpdateSchemaLabelInput) (*model.SchemaLabel, error) {
	panic(fmt.Errorf("not implemented: UpdateSchemaLabel - updateSchemaLabel"))
}

// DeleteSchemaLabel is the resolver for the deleteSchemaLabel field.
func (r *mutationResolver) DeleteSchemaLabel(ctx context.Context, domain string, schemaNodeName string, schemaLabelName string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSchemaLabel - deleteSchemaLabel"))
}

// GetSchemaNode is the resolver for the getSchemaNode field.
func (r *queryResolver) GetSchemaNode(ctx context.Context, domain string, name string) (*model.SchemaNode, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNode - getSchemaNode"))
}

// GetSchemaNodes is the resolver for the getSchemaNodes field.
func (r *queryResolver) GetSchemaNodes(ctx context.Context, domain string) ([]*model.SchemaNode, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNodes - getSchemaNodes"))
}

// GetSchemaNodeProperty is the resolver for the getSchemaNodeProperty field.
func (r *queryResolver) GetSchemaNodeProperty(ctx context.Context, domain string, schemaNodeName string, schemaPropertyName string, schemaPropertyType string) (*model.SchemaProperty, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNodeProperty - getSchemaNodeProperty"))
}

// GetSchemaNodeProperties is the resolver for the getSchemaNodeProperties field.
func (r *queryResolver) GetSchemaNodeProperties(ctx context.Context, domain string, schemaNodeName string) ([]*model.SchemaProperty, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNodeProperties - getSchemaNodeProperties"))
}

// GetSchemaNodeRelationship is the resolver for the getSchemaNodeRelationship field.
func (r *queryResolver) GetSchemaNodeRelationship(ctx context.Context, domain string, schemaNodeName string, schemaRelationshipName string) (*model.SchemaRelationship, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNodeRelationship - getSchemaNodeRelationship"))
}

// GetSchemaNodeRelationships is the resolver for the getSchemaNodeRelationships field.
func (r *queryResolver) GetSchemaNodeRelationships(ctx context.Context, domain string, schemaNodeName string) ([]*model.SchemaRelationship, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNodeRelationships - getSchemaNodeRelationships"))
}

// GetSchemaNodeLabel is the resolver for the getSchemaNodeLabel field.
func (r *queryResolver) GetSchemaNodeLabel(ctx context.Context, domain string, schemaNodeName string, schemaLabelName string) (*model.SchemaLabel, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNodeLabel - getSchemaNodeLabel"))
}

// GetSchemaNodeLabels is the resolver for the getSchemaNodeLabels field.
func (r *queryResolver) GetSchemaNodeLabels(ctx context.Context, domain string, schemaNodeName string) ([]*model.SchemaLabel, error) {
	panic(fmt.Errorf("not implemented: GetSchemaNodeLabels - getSchemaNodeLabels"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
